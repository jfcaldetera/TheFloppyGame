package laserGame;
import java.util.*;
/**
 *  An event containing a time and action to occur.
 * @author leechy
 */
public class Event {
    private String enemyName;
    private int occurences, xStart, yStart, xSpace, ySpace, time;
    private ArrayList<Enemy> enemies;
    
    /**
     * Default Constructor for an event
     * @param e
     *  The string representation of the image's location
     * @param o
     *  Number of enemies to spawn
     * @param xS
     *  The amount of space to put between enemies on the x-coordinate plane
     * @param yS
     *  The amount of space to put between enemies on the y-coordinate plane
     * @param t
     *  The time for this event to occur
     */
    public Event(String e, int o, int xSt, int ySt, int xS, int yS, int t){
        enemyName = e;
        occurences = o;
        xStart = xSt;
        yStart = ySt;
        xSpace = xS;
        ySpace = yS;
        time = t;
        enemies = new ArrayList<Enemy>();
        this.prepareEnemies();
    }
    
    /**
     * Gets the enemies name
     * @return
     *  String representation of the enemy's file
     */
    public String getEnemyName(){
        return enemyName;
    }
    
    /**
     * Gets the amount of time the enemy will occur
     * @return
     *  The int value of the amount of enemies to spawn
     */
    public int getOccurences(){
        return occurences;
    }
    
    /**
     * Gets the amount of x-space needed
     * @return
     *  The amount of x-coordinate to separate the enemies by
     */
    public int getXSpace(){
        return xSpace;
    }
    
    /**
     * Gets the amount of y-space needed
     * @return
     *  The amount of y-coordinate to separate the enemies by
     */
    public int getYSpace(){
        return ySpace;
    }

    /**
     * Gets the time the event occurs at
     * @return
     *  The int time for the event to occur at
     */
    public int getTime(){
        return time;
    }
    
    /**
     * Sets the amount of x-space needed
     * @param x
     *  The amount of x-space to set
     */
    public void setXSpace(int x){
        xSpace = x;
    }

    /**
     * Sets the amount of y-space needed
     * @param y
     *  The amount of y-space to set
     */
    public void setYSpace(int y){
        ySpace = y;
    }

    /**
     * Sets the amount of occurences
     * @param i
     *  The number of occurences to set the event to have
     */
    public void setOccurences(int i){
        occurences = i;
    }

    /**
     * The name of the enemy file
     * @param s
     *  The string representation of the enemy name
     */
    public void setEnemyName(String s){
        enemyName = s;
    }

    /**
     * The time for the event to occur
     * @param i
     *  The time representation in milliseconds for the event to occur
     */
    public void setTime(int i){
        time = i;
    }

    /**
     * Puts the enemies from the event into an arraylist
     */
    private void prepareEnemies(){
        for(int i=0;i<occurences;i++){
            enemies.add(new Enemy(enemyName, (xSpace*i)+xStart, (ySpace*i)+yStart));
        }
    }

    /**
     * Gets the list of enemies generated by this event
     * @return
     *  ArrayList of enemies
     */
    public ArrayList<Enemy> getEnemies(){
        return enemies;
    }

}
